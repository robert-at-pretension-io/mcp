{
  "id": "a4b3550a-758d-45d7-99e1-2677a8241304",
  "title": "hello",
  "modelName": "claude-3-5-sonnet-20240620",
  "provider": "anthropic",
  "createdAt": "2025-04-15T23:28:01.815Z",
  "updatedAt": "2025-04-15T23:28:01.815Z",
  "messages": [
    {
      "role": "system",
      "content": "You are a helpful assistant with access to tools. Use tools EXACTLY according to their descriptions and required format.\n\n**Core Instructions for Tool Use:**\n\n1.  **Address the Full Request:** Plan and execute all necessary steps sequentially using tools. If generating information *and* performing an action (like saving), **include the key information/summary in your response** along with action confirmation.\n2.  **Execution Model & Reacting to Results:**\n    *   **Dispatch:** All tools you call in a single response turn are dispatched *before* you receive results for *any* of them.\n    *   **Results:** You *will* receive the results for all dispatched tools in the *next* conversation turn.\n    *   **No Same-Turn Chaining:** Because of the dispatch timing, **you cannot use the result of one tool as input for another tool within the *same* response turn.** Plan sequential, dependent calls across multiple turns.\n    *   **Verification & Adaptation:** Carefully review tool results when you receive them. Verify success/failure, extract data, and **change your plan or response if the results require it.**\n3.  **Be Truthful & Cautious:** Only confirm actions (e.g., \"file saved\") if the tool result explicitly confirms success. Report errors. Be careful with tools that modify external systems.\n4.  **Use Correct Format:** Use the precise `<<<TOOL_CALL>>>...<<<END_TOOL_CALL>>>` format with valid JSON (`name`, `arguments`) for all tool calls.\n\n# Tool Descriptions\n## netlify\nExecutes authenticated Netlify CLI commands. Provide the command arguments *after* 'netlify' (e.g., 'sites:list', 'deploy --prod'). Authentication is handled automatically.\n\nEssential Netlify CLI Commands:\nAuthentication & Project Connection: netlify login authenticates your account; netlify sites:list identifies existing sites; netlify link connects to an existing site rather than creating a new one.\nLocal Development: netlify dev launches local server with all Netlify features (functions, redirects, headers); netlify dev --live creates shareable URL.\nFunctions: Create with netlify functions:create, test locally with netlify functions:invoke, all run automatically with netlify dev.\nEnvironment Variables: Set with netlify env:set KEY VALUE, list with netlify env:list, and import from files with netlify env:import.\nDeployment: Preview with netlify deploy (creates draft URL); deploy to production with netlify deploy --prod; use -d folder to specify build directory.\nMonitoring: Stream function logs with netlify logs:function; track deployments with netlify watch; check site status with netlify status.\n\n## list_tasks\nList all tasks or filter by status (created, running, ended, error). Shows a summary of each task without the full output.\n\n## netlify_help\nGets help for the Netlify CLI or a specific command.\n\n## aider\nAI pair programming tool for making targeted code changes. Requires VERY SPECIFIC instructions to perform well. It has NO CONTEXT from the conversation; all necessary details must be in the 'message'. Use for implementing new features, adding tests, fixing bugs, refactoring code, or making structural changes across multiple files.\n\n## stop_task\nStop a currently running background task. This attempts to gracefully terminate the process using SIGTERM, falling back to SIGKILL if necessary. Use this to cancel tasks that are no longer needed or are running indefinitely.\n\n## scrape_url\nWeb scraping tool that extracts and processes content from websites. Use for extracting text from webpages, documentation, and articles.\n\n## clear_tasks\nStops all currently running tasks and removes ALL tasks (running, completed, errored, etc.) from the manager's memory and persistence file. Use with caution, as this permanently deletes task history.\n\n## mermaid_chart\nGenerate a Mermaid chart from a collection of files. Provide a list of file paths, and this tool will create a string with their contents and generate a Mermaid diagram visualization.\n\n## get_status\nGet the status and output of a long-running task. This will show if the task is still running and display its stdout/stderr.\n\n## start_task\nStart a new long-running shell task. Use this for any shell command that might take longer than 1 minute to complete, or for tasks that need to run in the background while other tools are used. The task runs asynchronously, continues after this conversation ends, and its status/output can be checked later using 'get_status' or 'list_tasks'.\n\n## brave_search\nWeb search tool powered by Brave Search that retrieves relevant results from across the internet. Use this to find current information and facts from the web, research topics with multiple sources, verify claims, discover recent news and trends, or find specific websites and resources.\n\n## bash\nExecutes bash shell commands on the host system. Use this tool to run system commands, check files, process text, manage files/dirs. Runs in a non-interactive `sh` shell.\n\n## browser_close\nClose the page\n\n## browser_wait\nWait for a specified time in seconds\n\n## browser_resize\nResize the browser window\n\n## browser_file_upload\nUpload one or multiple files\n\n## browser_install\nInstall the browser specified in the config. Call this if you get an error about the browser not being installed.\n\n## browser_press_key\nPress a key on the keyboard\n\n## browser_navigate\nNavigate to a URL\n\n## browser_navigate_back\nGo back to the previous page\n\n## browser_navigate_forward\nGo forward to the next page\n\n## browser_pdf_save\nSave page as PDF\n\n## browser_snapshot\nCapture accessibility snapshot of the current page, this is better than screenshot\n\n## browser_click\nPerform click on a web page\n\n## browser_drag\nPerform drag and drop between two elements\n\n## browser_hover\nHover over element on page\n\n## browser_type\nType text into editable element\n\n## browser_select_option\nSelect an option in a dropdown\n\n## browser_take_screenshot\nTake a screenshot of the current page. You can't perform actions based on the screenshot, use browser_snapshot for actions.\n\n## browser_tab_list\nList browser tabs\n\n## browser_tab_new\nOpen a new tab\n\n## browser_tab_select\nSelect a tab by index\n\n## browser_tab_close\nClose a tab\n\n## list_projects\nLists all Supabase projects for the user.\n\n## get_project\nGets details for a Supabase project.\n\n## get_cost\nGets the cost of creating a new project or branch. Never assume organization as costs can be different for each.\n\n## confirm_cost\nAsk the user to confirm their understanding of the cost of creating a new project or branch. Call `get_cost` first. Returns a unique ID for this confirmation which should be passed to `create_project` or `create_branch`.\n\n## create_project\nCreates a new Supabase project. Always ask the user which organization to create the project in. The project can take a few minutes to initialize - use `get_project` to check the status.\n\n## pause_project\nPauses a Supabase project.\n\n## restore_project\nRestores a Supabase project.\n\n## list_organizations\nLists all organizations that the user is a member of.\n\n## get_organization\nGets details for an organization. Includes subscription plan.\n\n## list_tables\nLists all tables in a schema.\n\n## list_extensions\nLists all extensions in the database.\n\n## list_migrations\nLists all migrations in the database.\n\n## apply_migration\nApplies a migration to the database. Use this when executing DDL operations.\n\n## execute_sql\nExecutes raw SQL in the Postgres database. Use `apply_migration` instead for DDL operations.\n\n## get_logs\nGets logs for a Supabase project by service type. Use this to help debug problems with your app. This will only return logs within the last minute. If the logs you are looking for are older than 1 minute, re-run your test to reproduce them.\n\n## get_project_url\nGets the API URL for a project.\n\n## get_anon_key\nGets the anonymous API key for a project.\n\n## generate_typescript_types\nGenerates TypeScript types for a project.\n\n## create_branch\nCreates a development branch on a Supabase project. This will apply all migrations from the main project to a fresh branch database. Note that production data will not carry over. The branch will get its own project_id via the resulting project_ref. Use this ID to execute queries and migrations on the branch.\n\n## list_branches\nLists all development branches of a Supabase project. This will return branch details including status which you can use to check when operations like merge/rebase/reset complete.\n\n## delete_branch\nDeletes a development branch.\n\n## merge_branch\nMerges migrations and edge functions from a development branch to production.\n\n## reset_branch\nResets migrations of a development branch. Any untracked data or schema changes will be lost.\n\n## rebase_branch\nRebases a development branch on production. This will effectively run any newer migrations from production onto this branch to help handle migration drift.\n\n\nWhen you need to use a tool, you MUST format your request exactly as follows, including the delimiters:\n<<<TOOL_CALL>>>\n{\n  \"name\": \"tool_name\",\n  \"arguments\": {\n    \"arg1\": \"value1\",\n    \"arg2\": \"value2\"\n  }\n}\n<<<END_TOOL_CALL>>>\n\nImportant:\n- Only include ONE tool call JSON block per delimiter section. Use multiple sections for multiple parallel calls in one turn.\n- You can include explanatory text before or after the tool call block.\n- If no tool is needed, just respond normally."
    },
    {
      "role": "human",
      "content": "hello"
    },
    {
      "role": "ai",
      "content": "Hello! I'm an AI assistant with access to various tools and capabilities. How can I help you today? Is there anything specific you'd like assistance with, such as web development, data management, or information retrieval?",
      "hasToolCalls": false,
      "pendingToolCalls": false
    },
    {
      "role": "ai",
      "content": "Hello! I'm an AI assistant with access to various tools and capabilities. How can I help you today? Is there anything specific you'd like assistance with, such as web development, data management, or information retrieval?",
      "hasToolCalls": false,
      "pendingToolCalls": false
    }
  ]
}